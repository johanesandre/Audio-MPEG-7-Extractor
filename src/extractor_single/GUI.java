package extractor_single;


//import static javax.management.Descriptor.lld;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.basex.core.BaseXException;
//import extractor_single;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Andre
 */
public class GUI extends javax.swing.JFrame {

   //private Descriptor a = new Descriptor();
  //  private Main b= new Main();
    String filename=null;
    String filename2=null;
    String output=null;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        wavinput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        extrackbutton = new javax.swing.JButton();
        wavoutput = new javax.swing.JTextField();
        xmlinput = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        attachwav = new javax.swing.JButton();
        attachxml = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputxquery = new javax.swing.JTextArea();
        Feature = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        wavinput.setEditable(false);
        wavinput.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        wavinput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wavinputActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("MPEG-7 EXTRACTOR");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setText("XQUERY");

        extrackbutton.setText("Extract!");
        extrackbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extrackbuttonActionPerformed(evt);
            }
        });

        wavoutput.setEditable(false);
        wavoutput.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        wavoutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wavoutputActionPerformed(evt);
            }
        });

        xmlinput.setEditable(false);
        xmlinput.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButton1.setText("XQuery!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        attachwav.setText("Select wav");
        attachwav.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachwavActionPerformed(evt);
            }
        });

        attachxml.setText("Select XML");
        attachxml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachxmlActionPerformed(evt);
            }
        });

        outputxquery.setColumns(20);
        outputxquery.setLineWrap(true);
        outputxquery.setRows(5);
        jScrollPane2.setViewportView(outputxquery);

        Feature.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Audio Power", "Audio Waveform", "Temporal Centroid", "Log Attack Time", "Audio Spectrum Centroid Type", "Audio Spectrum Spread Type", "Audio Spectrum Envelope Type", "Audio Spectrum Flatness Type", "Audio Spectrum Basis Type", "Audio Spectrum Spread Type", "Audio Spectrum Projection Type", "Audio Signature Type", "Sound Model", "Audio Fundamental Frequency", "Audio Harmonicity", "Harmonic Spectral Centroid", "Harmonic Spectral Deviation", "Harmonic Spectral Spread", "Harmonic Spectral Variation" }));
        Feature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeatureActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setText("Select Low Audio Descriptor");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);
        jTextField2.setText("Output XML");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(attachwav, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                .addComponent(attachxml, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(wavinput, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(wavoutput, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addComponent(extrackbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Feature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(xmlinput, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wavinput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(attachwav)))
                    .addComponent(extrackbutton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wavoutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attachxml)
                    .addComponent(xmlinput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Feature, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public String returnpathlagu()
{
    return filename;
}
public String returnpathxml()
{
    return filename2;
}

    
    private void wavinputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wavinputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wavinputActionPerformed

    private void extrackbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extrackbuttonActionPerformed
        // TODO add your handling code here:
        //Descriptor.main();
        Descriptor.lld(filename, filename2);
        JOptionPane.showMessageDialog(rootPane,"Ekstraksi Berhasil");
    }//GEN-LAST:event_extrackbuttonActionPerformed

    private void wavoutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wavoutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wavoutputActionPerformed

    private void attachxmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachxmlActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser= new JFileChooser();
        //FileNameExtensionFilter filter = new FileNameExtensionFilter("wav","Wave Sound");
        //chooser.addChoosableFileFilter(filter);
        //chooser.setFileFilter(filter);
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        filename= f.getAbsolutePath();
        filename2= f.getAbsolutePath().trim().replace(".wav",".xml");
        xmlinput.setText(filename);
        
    }//GEN-LAST:event_attachxmlActionPerformed

    private void FeatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeatureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FeatureActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add  your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void attachwavActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachwavActionPerformed
        // TODO add your handling code here
        JFileChooser chooser= new JFileChooser();
        //FileNameExtensionFilter filter = new FileNameExtensionFilter("wav","Wave Sound");
        //chooser.addChoosableFileFilter(filter);
        //chooser.setFileFilter(filter);
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        filename= f.getAbsolutePath();
//        String filename2= f.getAbsolutePath().trim().replace(".wav",".xml"));
        //String filename2= f.filename.trim().replace(".wav",".xml")
        filename2= f.getAbsolutePath().trim().replace(".wav",".xml");
        wavinput.setText(filename);
  //      wavoutput.setText(filename.trim().replace(".wav",".xml"));
        wavoutput.setText(filename2);
       // Descriptor a= new Descriptor();
      //  a.lld(filename,filename2);
    }//GEN-LAST:event_attachwavActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(Feature.getSelectedItem().equals("Audio Power"))
        {
            try {
            String[] data = XMLQUERY.AudioPowerType(filename2);
            StringBuilder res= new StringBuilder();
            for(int x=0;x<data.length;x++)
                res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }
        }
        else if(Feature.getSelectedItem().equals("Audio Waveform"))
        {
                       try {
            String[] data = XMLQUERY.AudioWaveformType(filename2);
            StringBuilder res= new StringBuilder();
            for(int x=0;x<data.length;x++)
                res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             } 
        }
        else if(Feature.getSelectedItem().equals("Temporal Centroid"))
        {
                       try {
            String[] data = XMLQUERY.TemporalCentroid(filename2);
            StringBuilder res= new StringBuilder();
            for(int x=0;x<data.length;x++)
                res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }         
        }
        else if(Feature.getSelectedItem().equals("Log Attack Time"))
        {
                 try {
            String[] data = XMLQUERY.LogAttackTime(filename2);
            StringBuilder res= new StringBuilder();
            for(int x=0;x<data.length;x++)
                res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }        
        }
        else if(Feature.getSelectedItem().equals("Audio Spectrum Centroid Type"))
        {
                         try {
            String[] data = XMLQUERY.AudioSpectrumCentroidType(filename2);
            StringBuilder res= new StringBuilder();
            for(int x=0;x<data.length;x++)
                res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }       
        }
         else if(Feature.getSelectedItem().equals("Audio Spectrum Spread Type"))
        {
                          try {
            String[] data = XMLQUERY.AudioSpectrumSpreadType(filename2);
            StringBuilder res= new StringBuilder();
            for(int x=0;x<data.length;x++)
                res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      
        }
         else if(Feature.getSelectedItem().equals("Audio Spectrum Envelope Type"))
        {
            try {
            String[] data = XMLQUERY.AudioSpectrumEnvelopeType(filename2);
            StringBuilder res= new StringBuilder();
            for(int x=0;x<data.length;x++)
                res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }
        }
         else if(Feature.getSelectedItem().equals("Audio Spectrum Flatness Type"))
        {
                          try {
                String[] data = XMLQUERY.AudioSpectrumFlatnessType(filename2);
                StringBuilder res= new StringBuilder();
                for(int x=0;x<data.length;x++)
                 res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      
        
        }
         else if(Feature.getSelectedItem().equals("Audio Spectrum Basis Type"))
        {
                                  try {
                String[] data = XMLQUERY.AudioSpectrumBasisType(filename2);
                StringBuilder res= new StringBuilder();
                for(int x=0;x<data.length;x++)
                 res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      

        }
         else if(Feature.getSelectedItem().equals("Audio Spectrum Spread Type"))
        {
                            try {
                String[] data = XMLQUERY.AudioSpectrumSpreadType(filename2);
                StringBuilder res= new StringBuilder();
                for(int x=0;x<data.length;x++)
                 res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      
      
        }
         else if(Feature.getSelectedItem().equals("Audio Spectrum Projection Type"))
        {
              try {
                String[] data = XMLQUERY.AudioSpectrumProjectionType(filename2);
                StringBuilder res= new StringBuilder();
                for(int x=0;x<data.length;x++)
                 res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      
        }
   
         else if(Feature.getSelectedItem().equals("Audio Signature Type"))
        {
                          try {
                String[] data = XMLQUERY.AudioSignatureType(filename2);
                StringBuilder res= new StringBuilder();
                for(int x=0;x<data.length;x++)
                 res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      
        
        }
         else if(Feature.getSelectedItem().equals("Sound Model"))
        {
                try {
                String[] data = XMLQUERY.SoundModel(filename2);
                StringBuilder res= new StringBuilder();
                for(int x=0;x<data.length;x++)
                 res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      
  
        }
         else if(Feature.getSelectedItem().equals("Audio Fundamental Frequency"))
        {
                              try {
                String[] data = XMLQUERY.AudioFundamentalFrequencyType(filename2);
                StringBuilder res= new StringBuilder();
                for(int x=0;x<data.length;x++)
                 res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      
    
        }
         else if(Feature.getSelectedItem().equals("Audio Harmonicity"))
        {
                              try {
                String[] data = XMLQUERY.AudioHarmonicityType(filename2);
                StringBuilder res= new StringBuilder();
                for(int x=0;x<data.length;x++)
                 res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      
    
        }
         else if(Feature.getSelectedItem().equals("Harmonic Spectral Centroid"))
        {
                          try {
                String[] data = XMLQUERY.HarmonicSpectralCentroidType(filename2);
                StringBuilder res= new StringBuilder();
                for(int x=0;x<data.length;x++)
                 res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      
        
        }
         else if(Feature.getSelectedItem().equals("Harmonic Spectral Deviation"))
        {
                                  try {
                String[] data = XMLQUERY.HarmonicSpectralDeviationType(filename2);
                StringBuilder res= new StringBuilder();
                for(int x=0;x<data.length;x++)
                 res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      

        }
         else if(Feature.getSelectedItem().equals("Harmonic Spectral Spread"))
        {
                          try {
                String[] data = XMLQUERY.HarmonicSpectralDeviationSpreadType(filename2);
                StringBuilder res= new StringBuilder();
                for(int x=0;x<data.length;x++)
                 res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      

                    
        }
         else if(Feature.getSelectedItem().equals("Harmonic Spectral Variation"))
        {
                             try {
                String[] data = XMLQUERY.HarmonicSpectralVariationType(filename2);
                StringBuilder res= new StringBuilder();
                for(int x=0;x<data.length;x++)
                 res.append(data[x]+",");
            String result=res.toString();
            outputxquery.setText(result);
            //Descriptor a= new Descriptor();
            //a.lld(filename,filename2);
        } catch (BaseXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }      
     
        }
//        panjang.setText(result.length);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Feature;
    private javax.swing.JButton attachwav;
    private javax.swing.JButton attachxml;
    private javax.swing.JButton extrackbutton;
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextArea outputxquery;
    private javax.swing.JTextField wavinput;
    private javax.swing.JTextField wavoutput;
    private javax.swing.JTextField xmlinput;
    // End of variables declaration//GEN-END:variables
}
